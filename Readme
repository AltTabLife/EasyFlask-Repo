Welcome to EasyFlask!

The purpose of EasyFlask is to create template-esque Flask applications while not having brain overload from syntax. Ideally, this will be part of the prototyping section of development, since I find myself creating sections of psuedo-code to map out what it would look like anyways.


How does it do this?
The meat of EasyFlask uses a modified ruamel.yaml parser in html_generator to take html tags like below and automatically turn it into an html document. All tags are ran through a list of current open and closed tags in HTML, filtering out 'attributes' for key-value pairs. 

Important notes:
1. The main reason for modifying the yaml parser is so it can take duplicate keys. This is the crux of how the html is made.
2. This is not able to parse both having a value pair, and attributes for it at the same time due to how the parser works, therefore 'content' elements are required for those. They will work universally, whereas a straight key-value pair will only work at the end of a tree.
    Example:
        title: Splash Page

        and

        title:
            content:
                text: Splash Page

        and

        title:
            content:
                text:
                    Splash Page
            attributes:
                class: title_class

        all work, but

        title: Splash Page
            attributes:
                class: title_class
        
        does not work.


Example EasyFlask file:
html:
  head:
    title: Splash Page
    link:
      attributes:
        href: path-to-css
  body:
    div:
      attributes:
        class: header_class
      h1: Nobody questions the spammish inspiration
      p: inspiration inspiration inspiration inspiration inspiration inspiration inspiration 
    br:
    div:
      attributes:
        class: inspiration_realized
      h2: Conclusion
      ul:
        li: You
        li: Should
        li: Now
        li: be
        li: inspired
      footer:

What's coming to EasyFlask next?
I fully understand it's in a state that I wouldn't even use it over just jinja2 at the moment after the inital generation. The next few major updates are designed to add the following.

    jinja2 compatability for cutting down further on the amount of individual elements needed while maintaining logic capabilities
    
    flask routing/logic for being able to build the flask routes and functions without having to put them in and insert the config manually
    
    live edit mode to be able to change the config file and have it change the website on file-save (thankfully flask's debug mode should make this pretty easy)
    
    source builder file to output the code being run to a source folder of your choosing, for the times there is website specific functionality that hasn't been accounted for yet.

    
    You're ready to install EasyFlask?
    All you need to do is a standard install by

    1. Cloning the repo with git
    2. cd into the EasyFlask-Repo
    3. run pip install dist/EasyFlask-1.0.tar.gz

    If you're not worried about modifying the repo with your own improvements, feel free to download just the .tar.gz and install as normal with pip.